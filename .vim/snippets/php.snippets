snippet nclass
	<?php
	namespace ${1:`CurrentNamespace()`};

	class ${2:`Filename()`}
	{
		${3}
	}
snippet nclassabs
	<?php
	namespace ${1:`CurrentNamespace()`};

	abstract class ${2:`Filename()`}
	{
		${3}
	}
snippet nclassfinal
	<?php
	namespace ${1:`CurrentNamespace()`};

	final class ${2:`Filename()`}
	{
		${3}
	}
snippet ninterface
	<?php
	namespace ${1:`CurrentNamespace()`};

	interface ${2:`Filename()`}
	{
		${3}
	}
snippet nclasstest
	<?php
	namespace ${1:`CurrentNamespace()`};

	class ${2:`Filename()`} extends \PHPUnit_Framework_TestCase
	{
		${3}
	}
snippet classabs
	<?php

	abstract class ${1:`filename()`}
	{
		${2}
	}
snippet classfinal
	<?php

	final class ${1:`filename()`}
	{
		${2}
	}
snippet class
	<?php

	class ${1:`filename()`}
	{
		${2}
	}
snippet classext
	<?php

	class ${1:`Filename()`} extends
	{
		${2}
	}
snippet interface
	<?php

	interface ${1:`vim_snippets#Filename()`}
	{
		${2}
	}
snippet classtest
	<?php

	class ${1:`Filename()`} extends \PHPUnit_Framework_TestCase
	{
		${2}
	}
snippet testf
	public function test${1}()
	{
		${2}
	}
snippet skipped 
	public function test${1}()
	{
		$this->markTestSkipped("${2}");
	}
snippet incomplete 
	public function test${1}()
	{
		$this->markTestIncomplete("${2}");
	}
snippet setup 
	public function setUp()
	{
		${1}
	}

snippet construct1
	private $$1;

	public function __construct($${1:})
	{
		$this->$1 = $$1;
	}
snippet construct2
	private $$1;
	private $$2;

	public function __construct($${1:}, $${2:})
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
	}
snippet construct3
	private $$1;
	private $$2;
	private $$3;

	public function __construct($${1:}, $${2:}, $${3:})
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
		$this->$3 = $$3;
	}
snippet factorym1
	private $$1;

	public static function ${2}($${1:})
	{
		return new self($$1);
	}

	private function __construct($$1)
	{
		$this->$1 = $$1;
	}
snippet factorym2
	private $$1;
	private $$2;

	public static function ${3}($${1:}, $${2:})
	{
		return new self($$1, $$2);
	}

	private function __construct($$1, $$2)
	{
		$this->$1 = $$1;
		$this->$2 = $$2;
	}
snippet publicf
	public function ${1}(${2})
	{
		${3}
	}
snippet privatef
	private function ${1}(${2})
	{
		${3}
	}
snippet protectedf
	protected function ${1}(${2})
	{
		${3}
	}
snippet protectedfabs
	abstract protected function ${1}(${2})
	{
		${3}
	}
snippet asserte
	$this->assertEquals(
		${1},
		${2}
	);
snippet asserts
	$this->assertSame(
		${1},
		${2}
	);
snippet assertt
	$this->assertTrue(
		${1}
	);
snippet assertf
	$this->assertFalse(
		${1}
	);
snippet arr
	$${1} = [
		${2},
	];
snippet stub
	$${1}->expects($this->${2}())
		->method('${3}')
		->will($this->returnValue(${4}));
snippet mock
	$${1} = $this->createMock('');
snippet mockb
	$${1} = $this->getMockBuilder('')
		->getMock(); 
snippet mockbwithoutconst
	$${1} = $this->getMockBuilder('')
		->disableOriginalConstructor()
		->getMock(); 
snippet error
	error_log(var_export($${1}, true));
snippet export
	var_export($${1}, true);
snippet dump 
	var_dump($${1:});
snippet printr 
	print_r($${1:});
snippet printrpre
	echo '<pre>' . print_r($${1:}) . '</pre>';
snippet trace
	error_log((new \Exception())->getTraceAsString());
snippet requireonce
	require_once __DIR__ . '/${1}.php';
snippet privateatt
	private $${1:};
snippet protectedatt
	protected $${1:};
snippet privateattarr
	private $${1:} = [];
snippet protectedattarr
	protected $${1:} = [];
snippet ?
	<?php

